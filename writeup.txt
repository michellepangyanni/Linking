COMP 321 Project 3: Linking
<Michelle Pang, yp29; Lily Gao, qg8>

---(Do not write lines of text that exceed the width of this line.)------------

PROBLEM 7.6

Symbol          swap.o .symtab entry?       Symbol Type     Module      Section
buf             yes                         extern          m.o         .data
bufp0           yes                         global          swap.o      .data
bufp1           yes                         local           swap.o      .bss
swap            yes                         global          swap.o      .text
temp            no                          --              --          --
incr            yes                         local           swap.o      .text
count           yes                         local           swap.o      .bss

PROBLEM 7.9

Since the execution of the program involves two objects named main, the 
strong implementation in foo6.c overrides the weak definition in bar6.c. 
The address printed is associated with the function main, not the char, 
explaining why it printed a result when main had not yet been initialized. 
A certain amount of memory is allocated for the machine code instructions, 
the byte that is print out is the first byte of the function memory, so it 
has a value. 


PROBLEM 7.12

A. The value of the relocated reference to swap in the callq instruction is 0xa.

ADDR(s) = ADDR(.text) = 0x4004e0
and
ADDR(r.symbol) = ADDR(swap) = 0x4004f8
refaddr = ADDR(s) + r.offset
	= 0x4004e0 + 0xa
	= 0x4004ea
*refptr = (unsigned) (ADDR(r.symbol) + r.addend - refaddr)
	= (unsigned) (0x4004f8 + (-4) - 0x4004ea)
	= (unsigned) (0xa)
    = 0xa
					
B. The value of the relocated reference to swap in the callq instruction is 0x22. 
ADDR(s) = 0x4004d0
and
ADDR(r.symbol) = ADDR(swap) = 0x400500
refaddr = ADDR(s) + r.offset
	= 0x4004d0 + 0xa
	= 0x4004da
*refptr = (unsigned) (ADDR(r.symbol) +r.addend - refaddr)
	= (unsigned) (0x400500 + (-4) - 0x4004da)
	= 0x22

TESTING STRATEGY

Black Box Testing
<
1. A .class file with valid magic number(of 0xCAFEBABE).
2. A .class file with invalid magic number(not of 0xCAFEBABE).
3. A .class file with a header that cannot be read because the file
quit reading early when reading through the constant pool.
4. A .class file with a header that can be read.
5. A .class file that includes a various of combination of tags to make sure 
they are printed out in the same order.
6. A .class file with an interface count that can be read.
7. A .class file with an interface count that cannot be read because the file
quit reading early when reading through the constant pool. 
8. A .class file with an attributes count that can be read.
9. A .class file with an attribute count that cannot be read because the file
quit reading early when reading through the constant pool.
10. A .class file that is truncated and contain extra bytes.
11. A .class file in which all indices into the constant pool that are followed 
while printing the dependencies and exports are invalid and the constant at 
that index is not of the expected type (according to its tag).
12. A .class file in which all indices into the constant pool that are followed 
while printing the dependencies and exports are valid and the constant at 
that index is of the expected type (according to its tag).
13. A .class file with a header than cannot be read.
14. A .class file with at least one incorrectly sized constant tag.
15. A .class file with a body that cannot be read.
16. A .class file with a different tag than index.
17. A .class file with an invalid constant_pool_count.
18. A .class file with an attribute name index that cannot be read.
19. A .class file with an attribute length that cannot be read.
20. A .class file with attribute data that cannot be read
21. An empty .class file. 
22. A .class file that does not print out all of the classâ€™ dependencies.
>

Michelle's notes:
<
focus on correct output.
Printing, verify files.
read through constant pool... basic checking
files does not quit early
magic number, attribute
>

TWO THINGS I LEARNED

<Replace with a description of two features of C that are used in the
 provided code for this assignment but weren't taught in lecture or lab
 that you learned about while completing this assignment.>



